name: docker-build
on: [push]
description: "Action that build and publish image to repo"
inputs:
  docker-path:
    description: |
      Dockerfile path
      Example: docker/lf-app1
    required: true
    type: string
  image-name:
    description: |
      Image name
      Example: lf-app1
    required: true
    type: string
  file:
    description: |
      Path to the Dockerfile. Defaut is {docker-path}/Dockerfile
      Example: Dockerfile, Dockerfile.libs, path/to/dir/Dockerfile
    required: false
    type: string
  account:
    description: |
      AWS account
      Example: 111087410577
    required: true
    default: 111087410577
    type: string
  tag:
    description: |
      Image tag name. Support comma,space separator
      Example: DD-MM-YEAR 0.0.1,dev-0.0.1
    required: false
    type: string
  build-args:
    description: |
      docker build args
      Example: SERVICE_NAME=lf-reward, etc
    required: false
    type: string
  buildx_version:
    description: |
      Docker buildx plugin version
      Example: 0.7.1
    required: false
    default: 0.7.1
    type: string
  scan_trivy:
    description: |
      When specified vulnerabilities are found the build falled. Default is 1
      Example: 0 or 1
    required: false
    default: 1
    type: string
  scan_dockle:
    description: |
      When specified checkpoins Dockerfile are found the build falled. Default is 1
      Example: 0 or 1
    required: false
    default: 1
    type: string
  publish:
    description: |
      Publish docker image to repository
      Default: false
    required: false
    default: false
    type: boolean
runs:
  using: "composite"
  steps:
    - name: Configure action
      shell: bash
      id: tag
      env:
        DOCKER_BUILDX_VERSION: ${{ inputs.buildx_version }}
        DOCKER_CONFIG: /tmp/.docker
      run: |
        echo "::group::Check image tag"
        if [ -z "${{ inputs.tag }}" ]; then
          IMAGE_TAG="$(date -u +%F-%H%M)-${GITHUB_SHA::8}"
          echo -e "\\e[36minfo: \\e[0mFallback to the tag format %Y-%m-%d-%H%M-SHA - ${IMAGE_TAG}";
          echo "::set-output name=tag::${IMAGE_TAG}"
        else
          IMAGE_TAG=$(echo ${{ inputs.tag }} | tr ' |,'  '\n')
          IMAGE_TAG="${IMAGE_TAG//'%'/'%25'}"
          IMAGE_TAG="${IMAGE_TAG//$'\n'/'%0A'}"
          IMAGE_TAG="${IMAGE_TAG//$'\r'/'%0D'}"
          echo -e "\\e[36minfo: \\e[0mImage tag is ${IMAGE_TAG}"
          echo "::set-output name=tag::${IMAGE_TAG}"
        fi
        echo "::endgroup::"
        echo "::group::Buildx setup"
        mkdir -p ${DOCKER_CONFIG}/cli-plugins && \
          echo -e "\\e[36minfo: \\e[0mCreate cli-plugins directory succeeded" || \
          echo "::error::Create cli-plugins directory failed"
        cp ~/.docker/config.json ${DOCKER_CONFIG}/config.json && \
          echo -e "\\e[36minfo: \\e[0mCopy docker config succeeded" || \
          echo "::error::Copy docker config failed"
        curl -sSLo ${DOCKER_CONFIG}/cli-plugins/docker-buildx \
          https://github.com/docker/buildx/releases/download/v${DOCKER_BUILDX_VERSION}/buildx-v${DOCKER_BUILDX_VERSION}.linux-amd64 \
          && echo -e "\\e[36minfo: \\e[0mDownload docker-buildx  succeeded" || echo "::error::Download docker-buildx failed"
        chmod +x ${DOCKER_CONFIG}/cli-plugins/docker-buildx
        DOCKER_TLS_VERIFY="" docker buildx create \
                    --name docker-buildx-runners \
                    --node docker-buildx-runners \
                    --driver kubernetes \
                    --driver-opt replicas=3 \
                    --use  \
                    && echo "Configure buildx context succeeded" || echo "::error::Configure buildx context failed"
        echo "::endgroup::"
        echo "::group::Buildx info"
        docker buildx inspect --bootstrap --builder docker-buildx-runners
        echo "::endgroup::"
#    - name: Docker meta
#      id: meta
#      env:
#        DOCKER_CONFIG: /tmp/.docker
#      uses: docker/metadata-action@master
#      with:
#        images: ${{ inputs.account }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.image-name }}
#        tags: |
#          type=sha,prefix=sha-,format=long
#          ${{ steps.tag.outputs.tag }}
          
    - name: Build and export to Docker
      uses: docker/build-push-action@v2
      env:
        DOCKER_CONFIG: /tmp/.docker
      with:
        build-args: ${{ inputs.build-args }}
        load: true
        context: ${{ inputs.docker-path }}
        file: ${{ inputs.file }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      env:
        DOCKER_CONFIG: /tmp/.docker
      with:
        image-ref: "${{ inputs.account }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.image-name }}:sha-${{ github.sha }}"
        exit-code: ${{ inputs.scan_trivy }}
        ignore-unfixed: true
        vuln-type: "os,library"
        severity: "CRITICAL"
        format: "table"

    - name: Run Dockle scanner
      uses: nemotoy/dockle-action@main
      env:
        DOCKER_CONFIG: /tmp/.docker
      with:
        image: "${{ inputs.account }}.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.image-name }}:sha-${{ github.sha }}"
        exit-code: ${{ inputs.scan_dockle }}
        exit-level: FATAL # ref to https://github.com/goodwithtech/dockle#checkpoint-summary
        timeout: 5m

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v2
      env:
        DOCKER_CONFIG: /tmp/.docker
      with:
        push: ${{ inputs.publish }}
        build-args: ${{ inputs.build-args }}
        context: ${{ inputs.docker-path }}
        file: ${{ inputs.file }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Post step
      shell: bash
      env:
        DOCKER_CONFIG: /tmp/.docker
      run: |
        echo "::group::Post step"
        rm -rf ${DOCKER_CONFIG} \
          && echo "Clean up tmp directory succeeded" || echo "::error::Clean up tmp directory"
        echo "::endgroup::"
        # need to buy github code quality
        # template: "@/contrib/sarif.tpl"
        # output: "trivy-results.sarif"
        # - name: Upload Trivy scan results to GitHub Security tab
        #   uses: github/codeql-action/upload-sarif@v1
        #   with:
        #     sarif_file: "trivy-results.sarif"
